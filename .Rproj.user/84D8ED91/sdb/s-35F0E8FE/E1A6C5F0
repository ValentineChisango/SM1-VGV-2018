{
    "collab_server" : "",
    "contents" : "---\ntitle: \"ZCB Pricing\"\nauthor:\n- Valentine Chisango\n- George Parekkadavil\n- Vegan Pather\ndate: \"`r format(Sys.time(), '%d %B %Y')`\"\noutput:\n  html_document: default\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n```{r 1}\n# Closed form solution to Bond price\n\nbond_price <- function(alpha,beta,sigma,t,T,r){\n  A <- (beta*(1-exp(-beta*(T-t))))/(alpha)\n  B <- (1/beta)*((alpha-(sigma)^2/(2*beta))*(A - T +t) - (sigma^(2)*A^2)/(4))\n  exp(-A*r +B)\n}\n\n```\n\n```{r 2}\n# Monte Carlo Simulation\n\nmonte_carlo <- function(alpha, beta, sigma, t, T, r, n, s){\n  # s = number of sub-intervals\n  # n = number of simulation trials  \n  \n  dt <- T/s\n  sim_path <- matrix(NA,nrow = n, ncol = 1) # matrix to store simulated path integrals\n  sim_r <- NULL # vector to store rates on the path\n  \n  \n  for (d in 1:n){\n    sim_r[1] <- r\n    for (j in 2:s){\n      mu <- alpha/beta + exp(-beta*dt)*(sim_r[j-1] -alpha/beta)\n      sd <- sqrt((sigma^2/(2*beta))*(1 -exp(-2*beta*(dt))))\n      sim_r[j] <- rnorm(1,mu,sd)\n    }\n    \n    int <- dt*(sum(sim_r)) # integral of path\n    sim_path[d,1] <- exp(-int) # bond price of path\n    \n  }\n  mean(sim_path) # empirical expectation of bond price using all paths\n}\n\n```\n\n```{r}\n# Another version of the MOnte Carlo simulation\n\n#Generate normal RV\nz=rnorm(1000)\nz.=-z\n\nCrude_Monte_Carlo=function(alpha,beta,sigma,T,r0,n,s){\n  \n  # alpha, beta, sigma <- Fixed Parameters\n  # T <- maturity time\n  # r0 <- Initial rate at time 0\n  # n <- Number of Simulations\n  # s <- NUmber of Subintervals \n  \n  #Simulate interest rates\n  dt <- T/s # Length of sub-intervals\n  sim_path= matrix(0,s+1,n) # Matrix that stores rate pathways\n  sim_path[1,]= r0\n  \n  for (i in 1:n){\n    for (j in 2:(s+1)){\n      dr=alpha*(beta-sim_path[j-1,i])*dt+sigma*sqrt(dt)*rnorm(1)# Euler Discretization\n      sim_path[j,i]=sim_path[j-1,i]+dr\n    }\n  }\n  \n  # Monte Carlo Simulations\n  Sum=colSums(sim_path[2:(s+1),]*dt)\n  int=exp(-Sum)\n  mean=mean(int)\n  sd=sd(int)/sqrt(n)\n  result=c(mean,sd)\n  result\n}\n```\n\n\n```{r 3}\n# Improvements to the Monte Carlo Simulation\n\n#################################################################################\n# Antithetic Variates\n################################################################################\n\nAntithetic_variates= function(alpha,beta,sigma,T,r0,n,s){\n  dt <- T/s # Length of sub-intervals\n  sim_path= matrix(0,s+1,n) # Matrix that stores rate pathways\n  sim_path_inv= matrix(0,nrow = s+1, ncol = n)# matrix to generate interest paths using inverse RV\n  sim_path[1,]= r0\n  sim_path_inv[1,]=r0\n \n  \n  for (i in 1:n){\n    for (j in 2:(s+1)){\n      dr=alpha*(beta-sim_path[j-1,i])*dt+sigma*sqrt(dt)*z[j-1] # Euler Discretization\n      dr_i= alpha*(beta-sim_path_inv[j-1,i])*dt + sigma*sqrt(dt)*z.[j-1]# Makes use of conjugate estimates\n      sim_path[j,i]=sim_path[j-1,i]+dr\n      sim_path_inv[j,i]=sim_path_inv[j-1,i]+dr_i\n      \n    }\n  }\n  \n  # Monte Carlo Simulations\n  Sum=colSums(sim_path[2:(s+1),]*dt)\n  Sum.=colSums(sim_path_inv[2:(s+1),]*dt)\n  int.=exp(-Sum.)\n  int=exp(-Sum)\n  Average=(int+int.)/2 # Average of both vectors\n  mean=mean(Average)\n  sd=sd(Average)/sqrt(n)\n  result=c(mean,sd)\n  result\n  \n}\n```\n\n```{r}\n#################################################################################\n# Moment matching\n#################################################################################\n\nMoment_Matching=function(alpha,beta,sigma,T,r0,n,s){\n  \n  # alpha, beta, sigma <- Fixed Parameters\n  # T <- maturity time\n  # r0 <- Initial rate at time 0\n  # n <- Number of Simulations\n  # s <- NUmber of Subintervals \n  \n  #Simulate interest rates\n  dt <- T/s # Length of sub-intervals\n  sim_path= matrix(0,s+1,n) # Matrix that stores rate pathways\n  sim_path[1,]= r0\n  z=rnorm(s)\n  z_m= z-mean(z)  # Moment matching transformation\n  \n  for (i in 1:n){\n    for (j in 2:(s+1)){\n      dr=alpha*(beta-sim_path[j-1,i])*dt+sigma*sqrt(dt)*z_m[j-1]# Euler Discretization\n      sim_path[j,i]=sim_path[j-1,i]+dr\n    }\n  }\n  \n  # Monte Carlo Simulations\n  Sum=colSums(sim_path[2:(s+1),]*dt)\n  int=exp(-Sum)\n  mean=mean(int)\n  sd=sd(int)/sqrt(n)\n  result=c(mean,sd)\n  result\n}\n```\n\n```{r}\n#################################################################################\n# Control Variates\n#################################################################################\n\n# We have decided to make use of the CIR model as our control variate process.\n# Below is the closed form solution under the CIR model\nbond_price_CIR <- function(alpha,beta,sigma,t,T,r0){\n  h <- sqrt(alpha^(2)+2*sigma^(2))\n  A <-(2*h*exp((alpha+h)*(T-t)/2)/(2*h+(alpha+h)*(exp((T-t)*(h))-1)))^((2*alpha*beta)/sigma^(2))\n  B <-2*(exp((T-t)*(h))-1)/(2*h+(alpha+h)*(exp((T-t)*(h))-1))\n  A*exp(-B*r0)\n}\n\n\n# Monte Carlo Simulations of Bond Price under the CIR model\n\nCIR_MC= function(alpha,beta,sigma,T,r0,n,s){\n  \n  dt <- T/s # Length of sub-intervals\n  sim_path= matrix(0,s+1,n) # Matrix that stores rate pathways\n  sim_path[1,]= r0\n  \n  for (i in 1:n){\n    for (j in 2:(s+1)){\n      dr=alpha*(beta-sim_path[j-1,i])*dt+(sigma*sqrt(dt)*rnorm(1)*sqrt(sim_path[j-1,i]))# Euler Discretization\n      sim_path[j,i]=sim_path[j-1,i]+dr\n    \n    }\n  }\n  \n  # Monte Carlo Simulations\n  Sum=colSums(sim_path[2:(s+1),]*dt)\n  int=exp(-Sum)\n  mean=mean(int)\n  sd=sd(int)/sqrt(n)\n  result=c(mean,sd)\n  result\n  \n}\n\n# Therefore the control variates estimate:\n\nControl_Variates_estimate= function(alpha, beta, sigma,t,T,r0,n,s){\n  Crude_Monte_Carlo(alpha,beta,sigma,T,r0,n,s)[1]- CIR_MC(alpha,beta,sigma,T,r0,n,s)[1]+bond_price_CIR(alpha,beta,sigma,t,T,r0)\n}\n```\n\n\n\n```{r 4}\n# Explicit Method\n\n# Simple Bond price function\nB <- function(t,r){\n  exp(-(T-t)*r)\n}\n\n\nexplicit <- function(alpha, beta, sigma, T, r, j, s){\n\n# j = number of sub-intervals for the short rate\n# s = number of sub-intervals for the time interval\n  \ndr = 1/j # lenght of short rate intervals\ndt = T/s # lenght of time intervals\n\n\np_d <- sigma^2/(2*((dr)^2)) -(alpha -beta*r)/(2*dr)\np_m <- 1/dt -(sigma^2)/(dr^2)\np_u <- sigma^2/(2*(dr^2)) +(alpha -beta*r)/(2*dr)\n\nV <- matrix(NA, nrow = j + 1, ncol = s + 1)\nV[,s+1] <- rep(1)\nV[j+1,] <- rep(1)\nfor (n in seq(s,0,-1)){\n    for (i in 1:j)\n       if (i == 1)\n         V[i,n] <- ((0.10 +1/dt)^(-1))*(p_d*V[i+1,n+1] +p_m*V[i,n+1] + p_u*V[i+2,n+1]) #Vetzal approx\n       else\n         V[i,n] <- ((0.11 -0.01*i +1/dt)^(-1))*(p_d*V[i+1,n+1] +p_m*V[i,n+1] + p_u*V[i-1,n+1])\n      \n}\nV\n}\n\n\n```\n\n```{r 5}\n# Implicit Method\n```\n\n```{r 6}\n# Crank-Nicholson Method\n```\n\n```{r 7}\n# Modified Fully Implicit Method\n```\n\n```{r 8, echo = FALSE}\n# Comparison of results\n# Varying short rates\n\ncompare_mat <- matrix(NA,nrow = 10, ncol = 8) # matrix of comparison\n\ncolnames(compare_mat) <- c(\"Alpha\",\"Beta\",\"Sigma\",\"Initial rate\",\"Known Price\",\"Monte Carlo\",\" MC System Time\",\"MC Squared Deviations\")\n\n\na = 0.01\nb = 0.1\ns = 0.04\nt= 0\nT = 1\n\nfor (j in 1:10){\n  compare_mat[j,1] <- a\n  compare_mat[j,2] <- b\n  compare_mat[j,3] <- s\n  compare_mat[j,4] <- 0.01 +0.01*(j-1)\n  compare_mat[j,5] <- bond_price(alpha = compare_mat[j,1],beta = compare_mat[j,2], sigma = compare_mat[j,3], t= 0, T = 1, r = compare_mat[j,4])\n  start_time <- proc.time()[1]\n  compare_mat[j,6] <- monte_carlo(alpha = compare_mat[j,1],beta = compare_mat[j,2], sigma = compare_mat[j,3], t= 0, T = 1, r = compare_mat[j,4], n = 1000, s=250)\n  compare_mat[j,7] <- proc.time()[1] -start_time\n  compare_mat[j,8] <- (compare_mat[j,6] -compare_mat[j,5])^2\n}\n\nvar <- sum(compare_mat[,8])/9\n\nlibrary(knitr)\nkable(compare_mat,align = \"c\")\n      \n```\n\n",
    "created" : 1530553834676.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "586717926",
    "id" : "E1A6C5F0",
    "lastKnownWriteTime" : 1530555042,
    "last_content_update" : 1530555042004,
    "path" : "~/SM1-VGV-2018/ZCB Pricing .Rmd",
    "project_path" : "ZCB Pricing .Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}